package com.stpo008.projecteuler;

import java.util.ArrayList;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class Problem2 {

    private static ArrayList<Integer> fibCache = new ArrayList<>();

    static {
        fibCache.add(0, 0);
        fibCache.add(1, 1);
        fibCache.add(2, 1);
    }

    public static void main(String[] args) {
        int lastValueLimit = 4000000;
        int n = 3;
        while(countFib(n) < lastValueLimit) {
            n++;
        }

        int sum = 0;
        for (int i = 2; i < n; i++) {
            int currentValue = fibCache.get(i);
            if(currentValue % 2 == 0)
                sum += currentValue;
        }

        System.out.println(sum);
    }

    public static int countFib(int n) {
        if(n < 0)
            throw new RuntimeException("n should not be negative");

        if(n == 0 || n == 1 || n == 2)
            return fibCache.get(n);

        if(fibCache.size() > n) {
           return fibCache.get(n);
        }

        int value = countFib(n - 1) + countFib(n - 2);
        fibCache.add(n, value);
        return value;
    }
}
